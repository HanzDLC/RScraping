numVoteCount <- character(0)
numEpisodes <- character(0)
numYear <- character(0)
numSplit <- c()
#Scraping the Title.
title <- scrape(session) %>%
html_nodes('h3.ipc-title__text') %>%
html_text
title <- title[2:51]
#Scraping the rating.
rating <- scrape(session) %>%
html_nodes('span.ratingGroup--imdb-rating')%>%
html_text
rating <- rating[1:50]
#Scraping the Vote Count.
numVoteCount <- scrape(session) %>%
html_nodes('span.ipc-rating-star--voteCount') %>%
html_text
numVoteCount <- numVoteCount[1:50]
#Scraping the span: Year, Number of Episodes, and Year Released.
numSplit <- scrape(session) %>%
html_nodes('span.sc-479faa3c-8') %>%
html_text
numSplit
#Get the number of Episodes
retrievedEpisode <- character()
for(i in seq(2, length(numSplit), by = 3) ){
currentEpisode <- numSplit[i]
retrievedEpisode <- c(retrievedEpisode, currentEpisode)
}
numEpisodes <- retrievedEpisode[1:50]
numEpisodes
#Get the year it was released
retrievedYear <- character()
for(i in seq(1, length(numSplit), by = 3) ){
currentYear <- numSplit[i]
retrievedYear <- c(retrievedYear, currentYear)
}
numYear <- retrievedYear[1:50]
numYear
updateYear <- sub("^(\\d{4}).*", "\\1", numYear)
updateRating <- sub("^(\\d+\\.\\d+).*", "\\1", rating)
updateVoteCount <- sub(".*?\\s*\\((\\S+)\\).*", "\\1", numVoteCount)
splitTitle <- gsub("\\d+\\.\\s", "", title)
splitTitle
wholeDF <- data.frame(rank, splitTitle, updateRating,updateVoteCount , numEpisodes, updateYear)
colnames(wholeDF) <- c("Rank", "Title", "Rating", "Vote Count", "Number of Episodes", "Year Released")
View(wholeDF)
library(ggplot2)
library(dplyr)
library(polite)
library(xml2)
library(magrittr)
library(rvest)
library(httr)
polite::use_manners(save_as = "polite_scrape.R")
url <- 'https://www.imdb.com/title/tt0436992/reviews?spoiler=hide&sort=curated&dir=desc&ratingFilter=0'
session <- bow(url,
user_agent = "Educational")
session
reviewerName <- character(0)
dateReviewed <- character(0)
userRating <- character(0)
titleReview <- character(0)
textReview <- character(0)
reviewerName <- scrape(session) %>%
html_nodes('span.display-name-link') %>%
html_text()
reviewerName
dateReviewed <- scrape(session) %>%
html_nodes('span.review-date') %>%
html_text()
dateReviewed
userRating <- data.frame(scrape(session) %>%
html_nodes('div.ipl-ratings-bar') %>%
html_text())
View(userRating)
titleReview <- scrape(session) %>%
html_nodes('a.title') %>%
html_text()
textReview <- scrape(session) %>%
html_nodes('div.text.show-more__control') %>%
html_text()
tryDF <- data.frame(dateReviewed, reviewerName, textReview,titleReview)
View(tryDF)
ratings_nodes <- scrape(session) %>%
html_nodes('div.ipl-ratings-bar')
userRating <- character(length(ratings_nodes))
for (i in seq_along(ratings_nodes)) {
rating <- ratings_nodes[i] %>%
html_text()
# Check if the extracted rating is empty
if (rating == "") {
userRating[i] <- "Not Rated"  # Set a label for missing ratings
} else {
userRating[i] <- rating
}
}
ratings_nodes <- scrape(session) %>%
html_nodes('div.ipl-ratings-bar')
userRating <- character(length(ratings_nodes))
for (i in seq_along(ratings_nodes)) {
rating <- ratings_nodes[i] %>%
html_text()
# Check if the extracted rating is empty
if (rating == " ") {
userRating[i] <- "N/A"  # Set a label for missing ratings
} else {
userRating[i] <- rating
}
}
# Create a data frame with all scraped data
finalDF <- data.frame(
dateReviewed = dateReviewed,
reviewerName = reviewerName,
textReview = textReview,
titleReview = titleReview,
userRating = userRating
)
ratings_nodes <- scrape(session) %>%
html_nodes('div.ipl-ratings-bar')
userRating <- character(length(ratings_nodes))
for (i in seq_along(ratings_nodes)) {
rating <- ratings_nodes[i] %>%
html_text()
# Check if the extracted rating is empty
if (rating == " ") {
userRating[i] <- "N/A"  # Set a label for missing ratings
} else {
userRating[i] <- rating
}
}
# Create a data frame with all scraped data
shortest_length <- min(length(dateReviewed), length(reviewerName), length(titleReview), length(textReview), length(userRating))
dateReviewed <- dateReviewed[1:shortest_length]
reviewerName <- reviewerName[1:shortest_length]
titleReview <- titleReview[1:shortest_length]
textReview <- textReview[1:shortest_length]
# Create the data frame
finalDF <- data.frame(
dateReviewed = dateReviewed,
reviewerName = reviewerName,
textReview = textReview,
titleReview = titleReview,
userRating = userRating[1:shortest_length]  # Trim ratings to match the shortest length
)
View(finalDF)
ratings_nodes <- scrape(session) %>%
html_nodes('div.ipl-ratings-bar')
html_text()
ratings_nodes <- scrape(session) %>%
html_nodes('div.ipl-ratings-bar')
html_text()
ratings_nodes <- scrape(session) %>%
html_nodes('div.ipl-ratings-bar')
userRating <- character(length(ratings_nodes))
for (i in seq_along(ratings_nodes)) {
rating <- ratings_nodes[i] %>%
html_text()
# Check if the extracted rating is empty
if (rating == " ") {
userRating[i] <- "N/A"  # Set a label for missing ratings
} else {
userRating[i] <- rating
}
}
# Create a data frame with all scraped data
shortest_length <- min(length(dateReviewed), length(reviewerName), length(titleReview), length(textReview), length(userRating))
dateReviewed <- dateReviewed[1:shortest_length]
reviewerName <- reviewerName[1:shortest_length]
titleReview <- titleReview[1:shortest_length]
textReview <- textReview[1:shortest_length]
# Create the data frame
finalDF <- data.frame(
dateReviewed = dateReviewed,
reviewerName = reviewerName,
textReview = textReview,
titleReview = titleReview,
userRating = userRating[1:shortest_length]  # Trim ratings to match the shortest length
)
View(finalDF)
library(dplyr)
library(polite)
library(xml2)
library(magrittr)
library(rvest)
library(httr)
polite::use_manners(save_as = "polite_scrape.R")
url <- 'https://www.imdb.com/title/tt0436992/reviews?spoiler=hide&sort=curated&dir=desc&ratingFilter=0'
session <- bow(url,
user_agent = "Educational")
session
reviewerName <- character(0)
dateReviewed <- character(0)
userRating <- character(0)
titleReview <- character(0)
textReview <- character(0)
reviewerName <- scrape(session) %>%
html_nodes('span.display-name-link') %>%
html_text()
reviewerName
dateReviewed <- scrape(session) %>%
html_nodes('span.review-date') %>%
html_text()
dateReviewed
ratings_nodes <- scrape(session) %>%
html_nodes('div.ipl-ratings-bar')
userRating <- character(length(ratings_nodes))
for (i in seq_along(ratings_nodes)) {
rating <- ratings_nodes[i] %>%
html_text()
# Check if the extracted rating is empty
if (rating == " ") {
userRating[i] <- "N/A"  # Set a label for missing ratings
} else {
userRating[i] <- rating
}
}
# Create a data frame with all scraped data
shortest_length <- min(length(dateReviewed), length(reviewerName), length(titleReview), length(textReview), length(userRating))
dateReviewed <- dateReviewed[1:shortest_length]
reviewerName <- reviewerName[1:shortest_length]
titleReview <- titleReview[1:shortest_length]
textReview <- textReview[1:shortest_length]
# Create the data frame
finalDF <- data.frame(
dateReviewed = dateReviewed,
reviewerName = reviewerName,
textReview = textReview,
titleReview = titleReview,
userRating = userRating[1:shortest_length]  # Trim ratings to match the shortest length
)
View(finalDF)
titleReview <- scrape(session) %>%
html_nodes('a.title') %>%
html_text()
textReview <- scrape(session) %>%
html_nodes('div.text.show-more__control') %>%
html_text()
tryDF <- data.frame(dateReviewed, reviewerName, textReview,titleReview)
View(tryDF)
View(finalDF)
ratings_nodes <- scrape(session) %>%
html_nodes('div.ipl-ratings-bar')
userRating <- character(length(ratings_nodes))
for (i in seq_along(ratings_nodes)) {
rating <- ratings_nodes[i] %>%
html_text()
# Check if the extracted rating is empty
if (rating == " ") {
userRating[i] <- "N/A"  # Set a label for missing ratings
} else {
userRating[i] <- rating
}
}
# Create a data frame with all scraped data
shortest_length <- min(length(dateReviewed), length(reviewerName), length(titleReview), length(textReview), length(userRating))
dateReviewed <- dateReviewed[1:shortest_length]
reviewerName <- reviewerName[1:shortest_length]
titleReview <- titleReview[1:shortest_length]
textReview <- textReview[1:shortest_length]
# Create the data frame
finalDF <- data.frame(
dateReviewed = dateReviewed,
reviewerName = reviewerName,
textReview = textReview,
titleReview = titleReview,
userRating = userRating[1:shortest_length]  # Trim ratings to match the shortest length
)
View(finalDF)
url <- 'https://www.imdb.com/title/tt0436992/reviews?spoiler=hide&sort=curated&dir=desc&ratingFilter=0'
session <- bow(url,
user_agent = "Educational")
session
reviewerName <- character(0)
dateReviewed <- character(0)
userRating <- character(0)
titleReview <- character(0)
textReview <- character(0)
reviewerName <- scrape(session) %>%
html_nodes('span.display-name-link') %>%
html_text()
url <- 'https://www.imdb.com/title/tt0436992/reviews?spoiler=hide&sort=curated&dir=desc&ratingFilter=0'
session <- bow(url,
user_agent = "Educational")
session
reviewerName <- character(0)
dateReviewed <- character(0)
userRating <- character(0)
titleReview <- character(0)
textReview <- character(0)
reviewerName <- scrape(session) %>%
html_nodes('span.display-name-link') %>%
html_text()
reviewerName
dateReviewed <- scrape(session) %>%
html_nodes('span.review-date') %>%
html_text()
dateReviewed
ratings_nodes <- scrape(session) %>%
html_nodes('div.ipl-ratings-bar')
userRating <- character(length(ratings_nodes))
for (i in seq_along(ratings_nodes)) {
rating <- ratings_nodes[i] %>%
html_text()
# Check if the extracted rating is empty
if (rating == " ") {
userRating[i] <- "N/A"  # Set a label for missing ratings
} else {
userRating[i] <- rating
}
}
# Create a data frame with all scraped data
shortest_length <- min(length(dateReviewed), length(reviewerName), length(titleReview), length(textReview), length(userRating))
dateReviewed <- dateReviewed[1:shortest_length]
reviewerName <- reviewerName[1:shortest_length]
titleReview <- titleReview[1:shortest_length]
textReview <- textReview[1:shortest_length]
# Create the data frame
finalDF <- data.frame(
dateReviewed = dateReviewed,
reviewerName = reviewerName,
textReview = textReview,
titleReview = titleReview,
userRating = userRating[1:shortest_length]  # Trim ratings to match the shortest length
)
View(finalDF)
ratings_nodes <- scrape(session) %>%
html_nodes('div.ipl-ratings-bar')
userRating <- character(length(ratings_nodes))
for (i in seq_along(ratings_nodes)) {
rating <- ratings_nodes[i] %>%
html_text()
# Check if the extracted rating is empty
if (rating == "") {
userRating[i] <- "N/A"  # Set a label for missing ratings
} else {
userRating[i] <- rating
}
}
# Create a data frame with all scraped data
shortest_length <- min(length(dateReviewed), length(reviewerName), length(titleReview), length(textReview), length(userRating))
dateReviewed <- dateReviewed[1:shortest_length]
reviewerName <- reviewerName[1:shortest_length]
titleReview <- titleReview[1:shortest_length]
textReview <- textReview[1:shortest_length]
# Create the data frame
finalDF <- data.frame(
dateReviewed = dateReviewed,
reviewerName = reviewerName,
textReview = textReview,
titleReview = titleReview,
userRating = userRating[1:shortest_length]  # Trim ratings to match the shortest length
)
View(finalDF)
userRating <- scraped_data %>%
html_nodes('span.rating-other-user-rating') %>%
html_text() %>%
gsub("\\n", "", .)  # Remove unnecessary newline characters
ratings_nodes <- scrape(session) %>%
html_nodes('div.ipl-ratings-bar')
userRating <- scraped(session) %>%
html_nodes('span.rating-other-user-rating') %>%
html_text() %>%
gsub("\\n", "", .)  # Remove unnecessary newline characters
ratings_nodes <- scrape(session) %>%
html_nodes('div.ipl-ratings-bar')
userRating <- scrape(session) %>%
html_nodes('span.rating-other-user-rating') %>%
html_text() %>%
gsub("\\n", "", .)  # Remove unnecessary newline characters
# Check lengths and adjust vectors to match
shortest_length <- min(length(dateReviewed), length(reviewerName), length(titleReview), length(textReview), length(userRating))
dateReviewed <- dateReviewed[1:shortest_length]
reviewerName <- reviewerName[1:shortest_length]
titleReview <- titleReview[1:shortest_length]
textReview <- textReview[1:shortest_length]
userRating <- userRating[1:shortest_length]
# Create the data frame
finalDF <- data.frame(
dateReviewed = dateReviewed,
reviewerName = reviewerName,
textReview = textReview,
titleReview = titleReview,
userRating = userRating
)
View(finalDF)
library(dplyr)
library(polite)
library(xml2)
library(magrittr)
library(rvest)
library(httr)
url <- 'https://www.imdb.com/title/tt0436992/reviews?spoiler=hide&sort=curated&dir=desc&ratingFilter=0'
session <- bow(url,
user_agent = "Educational")
session
reviewerName <- character(0)
dateReviewed <- character(0)
userRating <- character(0)
titleReview <- character(0)
textReview <- character(0)
reviewerName <- scrape(session) %>%
html_nodes('span.display-name-link') %>%
html_text()
reviewerName
dateReviewed <- scrape(session) %>%
html_nodes('span.review-date') %>%
html_text()
dateReviewed
userRating <- data.frame(scrape(session) %>%
html_nodes('div.ipl-ratings-bar') %>%
html_text())
View(userRating)
titleReview <- scrape(session) %>%
html_nodes('a.title') %>%
html_text()
textReview <- scrape(session) %>%
html_nodes('div.text.show-more__control') %>%
html_text()
tryDF <- data.frame(dateReviewed, reviewerName, textReview,titleReview)
View(tryDF)
url_m1 <- 'https://www.imdb.com/title/tt0436992/reviews?spoiler=hide&sort=curated&dir=desc&ratingFilter=0'
session_m1 <- bow(url_m1,
user_agent = "Educational")
session_m1
reviewerName_m1 <- character(0)
dateReviewed_m1 <- character(0)
userRating_m1 <- character(0)
titleReview_m1 <- character(0)
textReview_m1 <- character(0)
movies_m1 <- scrape(session_m1) %>%
html_elements('div.lister-item')
reviewerName_m1 <- scrape(session_m1) %>%
html_nodes('span.display-name-link') %>%
html_text()
dateReviewed_m1 <- scrape(session_m1) %>%
html_nodes('span.review-date') %>%
html_text()
userRating_m1 <- movies_m1 %>%
html_element(".rating-other-user-rating") %>%
html_text()
titleReview_m1 <- scrape(session_m1) %>%
html_nodes('a.title') %>%
html_text()
textReview_m1 <- scrape(session_m1) %>%
html_nodes('div.text.show-more__control') %>%
html_text()
drWhoDF_m1 <- data.frame(userRating_m1, dateReviewed_m1, reviewerName_m1, titleReview_m1, textReview_m1,)
drWhoDF_m1 <- data.frame(userRating_m1, dateReviewed_m1, reviewerName_m1, titleReview_m1, textReview_m1,)
ibrary(dplyr)
library(dplyr)
library(polite)
library(xml2)
library(magrittr)
library(rvest)
library(httr)
polite::use_manners(save_as = "polite_scrape.R")
url_m1 <- 'https://www.imdb.com/title/tt0436992/reviews?spoiler=hide&sort=curated&dir=desc&ratingFilter=0'
session_m1 <- bow(url_m1,
user_agent = "Educational")
session_m2 <- bow(url,
user_agent = "Educational")
session_m3 <- bow(url,
user_agent = "Educational")
session_m4 <- bow(url,
user_agent = "Educational")
session_m5 <- bow(url,
user_agent = "Educational")
session_m1
session_m2
session_m3
session_m4
session_m5
reviewerName_m1 <- character(0)
dateReviewed_m1 <- character(0)
userRating_m1 <- character(0)
titleReview_m1 <- character(0)
textReview_m1 <- character(0)
movies_m1 <- scrape(session_m1) %>%
html_elements('div.lister-item')
View(session_m2)
url_m1 <- 'https://www.imdb.com/title/tt0436992/reviews?spoiler=hide&sort=curated&dir=desc&ratingFilter=0'
session_m1 <- bow(url_m1,
user_agent = "Educational")
session_m1
reviewerName_m1 <- character(0)
dateReviewed_m1 <- character(0)
userRating_m1 <- character(0)
titleReview_m1 <- character(0)
textReview_m1 <- character(0)
movies_m1 <- scrape(session_m1) %>%
html_elements('div.lister-item')
reviewerName_m1 <- scrape(session_m1) %>%
html_nodes('span.display-name-link') %>%
html_text()
dateReviewed_m1 <- scrape(session_m1) %>%
html_nodes('span.review-date') %>%
html_text()
userRating_m1 <- movies_m1 %>%
html_element(".rating-other-user-rating") %>%
html_text()
titleReview_m1 <- scrape(session_m1) %>%
html_nodes('a.title') %>%
html_text()
textReview_m1 <- scrape(session_m1) %>%
html_nodes('div.text.show-more__control') %>%
html_text()
drWhoDF_m1 <- data.frame(userRating_m1, dateReviewed_m1, reviewerName_m1, titleReview_m1, textReview_m1,)
drWhoDF_m1 <- data.frame(userRating_m1, dateReviewed_m1, reviewerName_m1, titleReview_m1, textReview_m1)
colnames(drWhoDF_m1) <- c("User Rating", "Date Reviewed", "Reviewer Name", "Title Review", "Text Review")
View(drWhoDF_m1)
